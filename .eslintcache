[{"/home/brandon/Projects/react-hooks-todos/src/reportWebVitals.js":"1","/home/brandon/Projects/react-hooks-todos/src/App.js":"2","/home/brandon/Projects/react-hooks-todos/src/index.js":"3","/home/brandon/Projects/react-hooks-todos/src/components/Form.js":"4","/home/brandon/Projects/react-hooks-todos/src/components/Todo.js":"5"},{"size":362,"mtime":1606626128436,"results":"6","hashOfConfig":"7"},{"size":3447,"mtime":1606980306665,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1606626128436,"results":"9","hashOfConfig":"7"},{"size":693,"mtime":1606636769491,"results":"10","hashOfConfig":"7"},{"size":614,"mtime":1606636603771,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"v6u4vm",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/brandon/Projects/react-hooks-todos/src/reportWebVitals.js",[],"/home/brandon/Projects/react-hooks-todos/src/App.js",["24"],"import React, { useState, useEffect } from 'react'\n\nimport './App.css'\n\nimport Form from './components/Form'\nimport Todo from './components/Todo'\n\nconst App = () => {\n  const localTodos = JSON.parse(localStorage.getItem('todos'))\n  const localNotes = JSON.parse(localStorage.getItem('notes'))\n  const [count, setCount] = useState(0)\n  const [text, setText] = useState('')\n  const [notes, setnotes] = useState(localNotes)\n  const [noteText, setNoteText] = useState('')\n  const [noteBody, setNoteBody] = useState('')\n  const [todos, setTodos] = useState(localTodos || [])\n\n  const addTodo = (text) => {\n    const newTodos = [\n      ...todos,\n      {\n        name: text,\n        isComplete: false,\n      },\n    ]\n    setTodos(newTodos)\n  }\n  const completeTodo = (index) => {\n    const newTodos = [...todos]\n    newTodos[index].isComplete = !newTodos[index].isComplete\n    setTodos(newTodos)\n  }\n  const deleteTodo = (index) => {\n    setTodos(\n      todos.filter((todo, i) => {\n        return index !== i\n      })\n    )\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setnotes([...notes, { noteText, noteBody }])\n    setNoteText('')\n    setNoteBody('')\n  }\n  const removeNote = (index) => {\n    console.log(index)\n    setnotes(\n      notes.filter((note, i) => {\n        return index !== i\n      })\n    )\n  }\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos))\n    localStorage.setItem('notes', JSON.stringify(notes))\n    document.title = noteText || 'hello'\n  }, [todos])\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"display-4 mx-auto\">To Do List</h1>\n      <hr />\n      <div className=\"row\">\n        <div className=\"className col-md-6 offset-md-3\">\n          <Form addTodo={addTodo} />\n          <ul className=\"list-group\">\n            {todos.map((todo, index) => {\n              return (\n                <Todo\n                  completeTodo={completeTodo}\n                  deleteTodo={deleteTodo}\n                  index={index}\n                  todo={todo}\n                  key={index}\n                />\n              )\n            })}\n          </ul>\n          <p>\n            Current {text || 'count'} is {count}\n          </p>\n          <p>\n            <button onClick={() => setCount(count - 1)}>-1</button>\n            <button onClick={() => setCount(0)}>Reset</button>\n            <button onClick={() => setCount(count + 1)}>+1</button>\n          </p>\n          <p>\n            <input\n              type=\"text\"\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n          </p>\n          <h1>Notes</h1>\n          {notes.map((note, index) => {\n            return (\n              <div key={index}>\n                <h2>{note.noteText}</h2>\n                <p>{note.noteBody}</p>\n                <button onClick={() => removeNote(index)}>Delete note</button>\n              </div>\n            )\n          })}\n          <form onSubmit={handleSubmit}>\n            <input\n              value={noteText}\n              onChange={(e) => setNoteText(e.target.value)}\n            />\n            <textarea\n              cols=\"30\"\n              rows=\"10\"\n              value={noteBody}\n              onChange={(e) => setNoteBody(e.target.value)}\n              placeholder=\"type your stuff here\"\n            />\n            <button type=\"submit\">Add Note</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/home/brandon/Projects/react-hooks-todos/src/index.js",[],["25","26"],"/home/brandon/Projects/react-hooks-todos/src/components/Form.js",[],"/home/brandon/Projects/react-hooks-todos/src/components/Todo.js",[],{"ruleId":"27","severity":1,"message":"28","line":59,"column":6,"nodeType":"29","endLine":59,"endColumn":13,"suggestions":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'noteText' and 'notes'. Either include them or remove the dependency array.","ArrayExpression",["35"],"no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [noteText, notes, todos]",{"range":"40","text":"41"},[1501,1508],"[noteText, notes, todos]"]